<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Sun Rongyang's Blog</title><link href="https://sun-rongyang.github.io/" rel="alternate"></link><link href="https://sun-rongyang.github.io/feeds/all.atom.xml" rel="self"></link><id>https://sun-rongyang.github.io/</id><updated>2018-06-09T19:43:00+08:00</updated><entry><title>Install GoogleTest on Mac OSX</title><link href="https://sun-rongyang.github.io/2018/install-googletest-on-mac-osx.html" rel="alternate"></link><published>2018-06-09T19:43:00+08:00</published><updated>2018-06-09T19:43:00+08:00</updated><author><name>Sun Rongyang</name></author><id>tag:sun-rongyang.github.io,2018-06-09:/2018/install-googletest-on-mac-osx.html</id><summary type="html">&lt;p&gt;GoogleTest is an awesome C++ testing framework. It is easy to install and use.&lt;/p&gt;
&lt;p&gt;First, download GoogleTest from github.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/google/googletest.git gtest
&lt;span class="nb"&gt;cd&lt;/span&gt; gtest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, use &lt;code&gt;cmake&lt;/code&gt; to build the GoogleTest.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir build
&lt;span class="nb"&gt;cd&lt;/span&gt; build
cmake ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use &lt;code&gt;ccmake .&lt;/code&gt; to turn on a project cmake …&lt;/p&gt;</summary><content type="html">&lt;p&gt;GoogleTest is an awesome C++ testing framework. It is easy to install and use.&lt;/p&gt;
&lt;p&gt;First, download GoogleTest from github.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/google/googletest.git gtest
&lt;span class="nb"&gt;cd&lt;/span&gt; gtest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, use &lt;code&gt;cmake&lt;/code&gt; to build the GoogleTest.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir build
&lt;span class="nb"&gt;cd&lt;/span&gt; build
cmake ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use &lt;code&gt;ccmake .&lt;/code&gt; to turn on a project cmake configuration TUI. Using the TUI, set &lt;code&gt;BUILD_GTEST: ON&lt;/code&gt; and change &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt;.
Finally, compile and install.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To use the GoogleTest, compile you own testing file by adding the following compiler argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;g++ -lgtest -lgtest_main
&lt;/pre&gt;&lt;/div&gt;</content><category term="c++"></category><category term="testing"></category><category term="TDD"></category></entry><entry><title>V2Ray Configuration</title><link href="https://sun-rongyang.github.io/2018/v2ray-configuration.html" rel="alternate"></link><published>2018-04-30T16:06:00+08:00</published><updated>2018-05-28T23:21:00+08:00</updated><author><name>Sun Rongyang</name></author><id>tag:sun-rongyang.github.io,2018-04-30:/2018/v2ray-configuration.html</id><summary type="html">&lt;h2&gt;Server (To be continued)&lt;/h2&gt;
&lt;h3&gt;Basic configuration&lt;/h3&gt;
&lt;p&gt;Set some custom usage for bash.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install wget
wget -o /etc/profile.d/bashrc_global.sh https://raw.githubusercontent.com/sun-rongyang/dotfiles/master/OnLinux/general/bashrc_global.sh
bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use SSH key to log in the server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi ./ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change SSH port and forbidden …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Server (To be continued)&lt;/h2&gt;
&lt;h3&gt;Basic configuration&lt;/h3&gt;
&lt;p&gt;Set some custom usage for bash.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install wget
wget -o /etc/profile.d/bashrc_global.sh https://raw.githubusercontent.com/sun-rongyang/dotfiles/master/OnLinux/general/bashrc_global.sh
bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use SSH key to log in the server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi ./ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change SSH port and forbidden root password log in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi /etc/ssh/sshd_config
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;change the following item.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...

Port SSH_PORT   # change ssh port

...

# forbid root password log in.
Match User root
    PasswordAuthentication no
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sestatus
semanage port -a -t ssh_port_t -p tcp SSH_PORT
systemctl restart sshd
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum upgrade -y
yum install vim -y
yum install epel-release -y
yum groupinstall &lt;span class="s2"&gt;&amp;quot;Development Tools&amp;quot;&lt;/span&gt; -y
yum install kernel-devel -y
yum install dkms -y     &lt;span class="c1"&gt;# Dynamic Kernel Module Support&lt;/span&gt;
yum install htop -y
yum install bash-completion-extras -y
yum install git -y
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Install V2Ray&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bash &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;curl -L -s https://install.direct/go.sh&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Configure V2Ray&lt;/h3&gt;
&lt;h4&gt;Time&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install ntp -y
ntpdate time.nist.gov
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;crontab -e
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* */2 * * * ntpdate time.nist.gov
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl restart crond
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Configuration file&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/v2ray/config.json
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;log&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;access&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/var/log/v2ray/access.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/var/log/v2ray/error.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;loglevel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;warning&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;inbound&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;V&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;RAY_LISTEN_PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;vmess&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;clients&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;YOUR_UUID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;level&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;quot;alterId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;outbound&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;freedom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Setup&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl status v2ray

netstat -plnt &lt;span class="p"&gt;|&lt;/span&gt; grep v2ray
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Client&lt;/h2&gt;
&lt;p&gt;Check the time of your client device first.&lt;/p&gt;
&lt;h3&gt;Windows&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create a new folder at any path you want with any name to contain client app and data. I use &lt;code&gt;V2RayN&lt;/code&gt; here.&lt;/li&gt;
&lt;li&gt;Download the newest version client app &lt;a href="https://github.com/2dust/v2rayN"&gt;V2RayN&lt;/a&gt;. Go to &lt;a href="https://github.com/2dust/v2rayN/releases"&gt;V2RayN-release&lt;/a&gt;, select a version and download related &lt;code&gt;v2rayN.exe&lt;/code&gt; file to &lt;code&gt;V2RayN&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Download &lt;code&gt;v2ray&lt;/code&gt; core for Windows. Go to &lt;a href="https://github.com/v2ray/v2ray-core/releases"&gt;v2ray-core-release&lt;/a&gt;, select a version and download related &lt;code&gt;v2ray-windows-64.zip&lt;/code&gt; file. Then extract to &lt;code&gt;V2RayN&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;V2RayN&lt;/code&gt; folder and &lt;code&gt;double click v2rayN&lt;/code&gt; to setup the client. If you meet some problem, you should check whether the version of your &lt;code&gt;.NET framework&lt;/code&gt; is larger than 4.5. If everything goes right, you can find an icon at lower right system tray.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;click&lt;/code&gt; the icon =&amp;gt; &lt;code&gt;Server&lt;/code&gt;(&lt;code&gt;服务器&lt;/code&gt;) =&amp;gt; &lt;code&gt;Add [VMess] server&lt;/code&gt;(&lt;code&gt;添加[VMess]服务器&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Set parameters which include &lt;code&gt;address&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;alterId&lt;/code&gt; and &lt;code&gt;remarks&lt;/code&gt;. Then &lt;code&gt;click&lt;/code&gt; &lt;code&gt;OK&lt;/code&gt; to save the configuration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right click&lt;/code&gt; the icon at system tray. Check the first item to turn on the proxy. You can chose proxy mode in the second item. It is sensible to select &lt;code&gt;PAC mode&lt;/code&gt;. You can switch server in the third item.&lt;/li&gt;
&lt;li&gt;Download and install &lt;code&gt;firefox&lt;/code&gt; brower.&lt;/li&gt;
&lt;li&gt;Setup &lt;code&gt;firefox&lt;/code&gt; brower.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;click&lt;/code&gt; &lt;code&gt;open menu&lt;/code&gt; icon at upper right =&amp;gt; &lt;code&gt;Options&lt;/code&gt; =&amp;gt; &lt;code&gt;Network Proxy&lt;/code&gt;/&lt;code&gt;Settings...&lt;/code&gt; =&amp;gt; select &lt;code&gt;Manual proxy configuration&lt;/code&gt; =&amp;gt; Set &lt;code&gt;SOCKS Host&lt;/code&gt; as &lt;code&gt;127.0.0.1&lt;/code&gt; and set &lt;code&gt;Port&lt;/code&gt; as &lt;code&gt;1080&lt;/code&gt; =&amp;gt; check &lt;code&gt;Proxy DNS when using SOCKS v5&lt;/code&gt; at the last line =&amp;gt; &lt;code&gt;OK&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;MacOS X&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download the newest version &lt;a href="https://github.com/Cenmrev/V2RayX/"&gt;V2RayX&lt;/a&gt;. Go to &lt;a href="https://github.com/Cenmrev/V2RayX/releases"&gt;V2RayX-release&lt;/a&gt;, select a version and download &lt;code&gt;.app.zip&lt;/code&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move the &lt;code&gt;V2RayX&lt;/code&gt; application to &lt;code&gt;Applications&lt;/code&gt; folder and &lt;code&gt;right click&lt;/code&gt; =&amp;gt; &lt;code&gt;Open&lt;/code&gt;. If you meet any permission request or something like that, enter Mac's password and click &lt;code&gt;install&lt;/code&gt;/&lt;code&gt;next&lt;/code&gt;. If you do not meet any problem, you will see an icon at the status bar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;click the icon&lt;/code&gt; =&amp;gt; &lt;code&gt;Configure...&lt;/code&gt;, You will see the dialog box. Set parameters as in the following image:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/v2rayx-config-OSX-1.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;click the icon&lt;/code&gt; =&amp;gt; &lt;code&gt;Servers&lt;/code&gt;, select the server you configured at the last step. Finally, select &lt;code&gt;V2Ray Rules&lt;/code&gt; to turn on the smart agent mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;IOS&lt;/h3&gt;
&lt;p&gt;Go to &lt;code&gt;App Store&lt;/code&gt; and download &lt;code&gt;Kitsunebi&lt;/code&gt;. Then configure the server as following images:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 1, 4, 5&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/v2rayx-config-IOS-1.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 2&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/v2rayx-config-IOS-2.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: scan a QR code to add a server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/v2rayx-config-IOS-3.png"&gt;&lt;/p&gt;
&lt;h3&gt;Android&lt;/h3&gt;
&lt;p&gt;I do not have any Android device. But I find an active updated client for Android device, &lt;a href="https://github.com/2dust/v2rayNG/releases"&gt;v2rayNG&lt;/a&gt;, you can try it.&lt;/p&gt;</content><category term="Web"></category><category term="Linux"></category><category term="CentOS"></category><category term="Windows"></category><category term="MacOS"></category><category term="IOS"></category><category term="Android"></category><category term="v2ray"></category></entry><entry><title>Recent DMRG Study for Finite Doped t-J Ladder</title><link href="https://sun-rongyang.github.io/2018/recent-dmrg-study-for-finite-doped-t-j-ladder.html" rel="alternate"></link><published>2018-04-18T23:01:00+08:00</published><updated>2018-04-18T23:01:00+08:00</updated><author><name>Sun Rongyang</name></author><id>tag:sun-rongyang.github.io,2018-04-18:/2018/recent-dmrg-study-for-finite-doped-t-j-ladder.html</id><summary type="html">&lt;p&gt;In this post, I attach the slides which collects the main simulation results in two recent DMRG papers &lt;a href="https://arxiv.org/abs/1804.00670"&gt;1804.00670&lt;/a&gt; and &lt;a href="https://arxiv.org/abs/1803.11342"&gt;1803.11342&lt;/a&gt;. I show it in the April 17 group meeting.&lt;/p&gt;
&lt;iframe src="https://sun-rongyang.github.io/2018/pdf/recent-DMRG-study-for-finite-doped-tJ-ladder.pdf" style="width:100%; height:600px;" frameborder="0"&gt;&lt;/iframe&gt;</summary><content type="html">&lt;p&gt;In this post, I attach the slides which collects the main simulation results in two recent DMRG papers &lt;a href="https://arxiv.org/abs/1804.00670"&gt;1804.00670&lt;/a&gt; and &lt;a href="https://arxiv.org/abs/1803.11342"&gt;1803.11342&lt;/a&gt;. I show it in the April 17 group meeting.&lt;/p&gt;
&lt;iframe src="https://sun-rongyang.github.io/2018/pdf/recent-DMRG-study-for-finite-doped-tJ-ladder.pdf" style="width:100%; height:600px;" frameborder="0"&gt;&lt;/iframe&gt;</content><category term="physics"></category><category term="research"></category><category term="DMRG"></category><category term="group-meeting"></category></entry><entry><title>Build Your Own HPC Cluster: (2) Configure Linux on Main Node</title><link href="https://sun-rongyang.github.io/2018/build-your-own-hpc-cluster-2-configure-linux-on-main-node.html" rel="alternate"></link><published>2018-02-18T20:08:00+08:00</published><updated>2018-02-18T20:08:00+08:00</updated><author><name>Sun Rongyang</name></author><id>tag:sun-rongyang.github.io,2018-02-18:/2018/build-your-own-hpc-cluster-2-configure-linux-on-main-node.html</id><summary type="html">&lt;h2&gt;Install CentOS 7 on the main node&lt;/h2&gt;
&lt;p&gt;Installation of CentOS 7 is very straightforward. What I want to consider here is something need be noticed. For the hard disk partitioning, your plan should seems like:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Partition&lt;/th&gt;
&lt;th align="left"&gt;FileSystem&lt;/th&gt;
&lt;th align="left"&gt;Note&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swap&lt;/td&gt;
&lt;td align="left"&gt;Swap&lt;/td&gt;
&lt;td align="left"&gt;Memory * (1.0~2.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;/boot&lt;/td&gt;
&lt;td align="left"&gt;xfs&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;/tmp&lt;/td&gt;
&lt;td align="left"&gt;xfs&lt;/td&gt;
&lt;td align="left"&gt;Not …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h2&gt;Install CentOS 7 on the main node&lt;/h2&gt;
&lt;p&gt;Installation of CentOS 7 is very straightforward. What I want to consider here is something need be noticed. For the hard disk partitioning, your plan should seems like:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Partition&lt;/th&gt;
&lt;th align="left"&gt;FileSystem&lt;/th&gt;
&lt;th align="left"&gt;Note&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Swap&lt;/td&gt;
&lt;td align="left"&gt;Swap&lt;/td&gt;
&lt;td align="left"&gt;Memory * (1.0~2.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;/boot&lt;/td&gt;
&lt;td align="left"&gt;xfs&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;/tmp&lt;/td&gt;
&lt;td align="left"&gt;xfs&lt;/td&gt;
&lt;td align="left"&gt;Not too large&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;/&lt;/td&gt;
&lt;td align="left"&gt;xfs&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;/home&lt;/td&gt;
&lt;td align="left"&gt;xfs&lt;/td&gt;
&lt;td align="left"&gt;Large enough&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;BIOSboot&lt;/td&gt;
&lt;td align="left"&gt;biosboot&lt;/td&gt;
&lt;td align="left"&gt;For bios boot&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For temporary path &lt;code&gt;/tmp&lt;/code&gt;, it is better to allocate a small part of the hard disk to it independently. Because all the users have &lt;code&gt;777&lt;/code&gt; permission, someone wiil write some large temporary file to the path to drain the space of &lt;code&gt;/&lt;/code&gt; if &lt;code&gt;/tmp&lt;/code&gt; just mount to root path.&lt;/p&gt;
&lt;p&gt;For the boot mode, we chose Legacy. Then the installation procedures are all straightforward. After installing CentOS 7, we can configure our network.&lt;/p&gt;
&lt;h2&gt;Network configuration&lt;/h2&gt;
&lt;p&gt;At the login node, one network interface connects the Internet, the other one connects the LAN. First we get the names of the interfaces and check that they have been connected with network cable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip link &lt;span class="c1"&gt;# get the name of interface&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;65536&lt;/span&gt; qdisc noqueue state UNKNOWN mode DEFAULT qlen &lt;span class="m"&gt;1&lt;/span&gt;
    link/loopback &lt;span class="m"&gt;00&lt;/span&gt;:00:00:00:00:00 brd &lt;span class="m"&gt;00&lt;/span&gt;:00:00:00:00:00
&lt;span class="m"&gt;2&lt;/span&gt;: enp6s0f0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc mq state UP mode DEFAULT qlen &lt;span class="m"&gt;1000&lt;/span&gt;
    link/ether &lt;span class="m"&gt;00&lt;/span&gt;:25:90:98:bd:f0 brd ff:ff:ff:ff:ff:ff
&lt;span class="m"&gt;3&lt;/span&gt;: enp6s0f1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc mq state UP mode DEFAULT qlen &lt;span class="m"&gt;1000&lt;/span&gt;
    link/ether &lt;span class="m"&gt;00&lt;/span&gt;:25:90:98:bd:f1 brd ff:ff:ff:ff:ff:ff
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTE: We ignore the bash shell prompt ''#'' and we are always at root user except the final normal user test.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Here, we see two physical interfaces, enp6s0f0 and enp6s0f1. We select enp6s0f1 as the interface which connect Internet. We can use &lt;code&gt;ethtool&lt;/code&gt; command to check whether the interface has been connected to the Internet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ethtool enp6s0f1

Settings &lt;span class="k"&gt;for&lt;/span&gt; enp6s0f1:
    Supported ports: &lt;span class="o"&gt;[&lt;/span&gt; TP &lt;span class="o"&gt;]&lt;/span&gt;
    Supported link modes:   10baseT/Half 10baseT/Full
                            100baseT/Half 100baseT/Full
                            1000baseT/Full
    Supported pause frame use: Symmetric
    Supports auto-negotiation: Yes
    Advertised link modes:  10baseT/Half 10baseT/Full
                            100baseT/Half 100baseT/Full
                            1000baseT/Full
    Advertised pause frame use: Symmetric
    Advertised auto-negotiation: Yes
    Speed: 1000Mb/s
    Duplex: Full
    Port: Twisted Pair
    PHYAD: &lt;span class="m"&gt;1&lt;/span&gt;
    Transceiver: internal
    Auto-negotiation: on
    MDI-X: off &lt;span class="o"&gt;(&lt;/span&gt;auto&lt;span class="o"&gt;)&lt;/span&gt;
    Supports Wake-on: d
    Wake-on: d
    Current message level: 0x00000007 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                   drv probe link
    Link detected: yes &lt;span class="c1"&gt;# network cable connected&lt;/span&gt;

$ ethtool enp6s0f0
&lt;span class="c1"&gt;# similar output&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we set the network parameters about the two interfaces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ vi /etc/sysconfig/network-scripts/ifcfg-enp6s0f1

&lt;span class="nv"&gt;TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Ethernet
&lt;span class="nv"&gt;BOOTPROTO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;static
&lt;span class="nv"&gt;IPADDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;your_own_internet_ip_address
&lt;span class="nv"&gt;NETMASK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;your_netmask
&lt;span class="nv"&gt;GATEWAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;your_getway
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;enp6s0f1
&lt;span class="nv"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1bb4d952-da42-4494-a43c-46ebc4442e0e
&lt;span class="nv"&gt;DEVICE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;enp6s0f1
&lt;span class="nv"&gt;ONBOOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;span class="nv"&gt;NETWORK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;BROADCAST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;

---------------------------

$ vi /etc/sysconfig/network-scripts/ifcfg-enp6s0f0

&lt;span class="nv"&gt;TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Ethernet
&lt;span class="nv"&gt;BOOTPROTO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;static
&lt;span class="nv"&gt;IPADDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;192&lt;/span&gt;.168.6.1
&lt;span class="nv"&gt;NETMASK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;.255.255.0
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;enp6s0f0
&lt;span class="nv"&gt;UUID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;c5469722-15c1-40b0-b033-fc45ef72c223
&lt;span class="nv"&gt;DEVICE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;enp6s0f0
&lt;span class="nv"&gt;ONBOOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;NOTE: The LAN interface enp6s0f0 need not to set the "GATEWAY".&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Then we set the DNS servers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi /etc/resolv.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And add your own DNS servers to the file. Then we set the hosts and hostname of the login node. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vi /etc/hosts &lt;span class="c1"&gt;# add the line below&lt;/span&gt;
-----------------------------
your_own_internet_ip_address your_loginNode_hostname &lt;span class="c1"&gt;# IP address and hostname of the Internet&lt;/span&gt;
&lt;span class="m"&gt;192&lt;/span&gt;.168.6.1 master &lt;span class="c1"&gt;# IP address and hostname of the LAN&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your_loginNode_hostname&amp;quot;&lt;/span&gt; &amp;gt; /etc/hostname
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we restart the network service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/network restart

&lt;span class="c1"&gt;# check the Internet&lt;/span&gt;
ping -c4 bing.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we can reboot the login node.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;shutdown -r now
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Basic Configuration&lt;/h2&gt;
&lt;p&gt;Now, we can upgrade our system first time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum upgrade -y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, we install some necessarily used softwares using yum.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install -y wget net-tools vim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we add EPEL repository and OpenHPC repository to the system.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
wget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-10.noarch.rpm
rpm -ivh epel-release-7-10.noarch.rpm
yum install http://build.openhpc.community/OpenHPC:/1.3/CentOS_7/x86_64/ohpc-release-1.3-1.el7.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For the requirement for OpenHPC, we need disable by firewall.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;systemctl disable firewalld
systemctl stop firewalld
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To save time, we can also install bash autocompletion tool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install bash-completion-extras -y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, we upgrade the system again. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum upgrade -y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In next post, we will install OpenHPC and configure the provisioning system which is the most powerful tool to construct the compute nodes. Stay tuned! &lt;/p&gt;</content><category term="HPC"></category><category term="cluster"></category><category term="Linux"></category></entry><entry><title>Build Your Own HPC Cluster: (1) Hardware Construction</title><link href="https://sun-rongyang.github.io/2018/build-your-own-hpc-cluster-1-hardware-construction.html" rel="alternate"></link><published>2018-02-18T09:23:00+08:00</published><updated>2018-02-18T09:23:00+08:00</updated><author><name>Sun Rongyang</name></author><id>tag:sun-rongyang.github.io,2018-02-18:/2018/build-your-own-hpc-cluster-1-hardware-construction.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;High performance computing (HPC) Linux cluster is a powerful tool for scientific research. If you have a research group, it is very convenient to collect your computing resource by building a HPC cluster. In this &lt;code&gt;Build Your Own HPC Cluster&lt;/code&gt; series, I will introduce how to construct your own …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;High performance computing (HPC) Linux cluster is a powerful tool for scientific research. If you have a research group, it is very convenient to collect your computing resource by building a HPC cluster. In this &lt;code&gt;Build Your Own HPC Cluster&lt;/code&gt; series, I will introduce how to construct your own HPC cluster using &lt;a href="https://www.centos.org"&gt;Centos 7&lt;/a&gt; Linux distribution and &lt;a href="https://openhpc.community"&gt;OpenHPC&lt;/a&gt; tools. I select &lt;a href="https://slurm.schedmd.com"&gt;Slurm&lt;/a&gt; as job scheduling system.&lt;/p&gt;
&lt;p&gt;In the first post of the series, I will introduce something about hardware construction. Roughly, that is how to connect your &lt;em&gt;computers&lt;/em&gt; (nodes) together.&lt;/p&gt;
&lt;h2&gt;Main node&lt;/h2&gt;
&lt;p&gt;Main node also called login node, control node or controller which is a computer has two network interfaces, and one of them connects to the Internet, the other connects to a network switch.&lt;/p&gt;
&lt;h2&gt;Compute node&lt;/h2&gt;
&lt;p&gt;Several computers with one network interface are as compute nodes. They are all connected to the same network switch.&lt;/p&gt;
&lt;h2&gt;Network structure&lt;/h2&gt;
&lt;p&gt;Now, we can connect all the nodes together. First, we select a network interface on the login node and connect it to the Internet. Then we connect the other network interface to the network switch. Finally, we connect all the network interfaces on compute nodes to the same network switch.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That is all requirement for hardware. In the next post, I will introduce how to install CentOS on the main node.&lt;/p&gt;</content><category term="HPC"></category><category term="cluster"></category><category term="Linux"></category><category term="hardware"></category></entry><entry><title>Use Virtualbox and CentOS 7 Build a Local Linux Developement Environment on Mac</title><link href="https://sun-rongyang.github.io/2018/use-virtualbox-and-centos-7-build-a-local-linux-developement-environment-on-mac.html" rel="alternate"></link><published>2018-02-17T18:27:00+08:00</published><updated>2018-02-17T18:27:00+08:00</updated><author><name>Sun Rongyang</name></author><id>tag:sun-rongyang.github.io,2018-02-17:/2018/use-virtualbox-and-centos-7-build-a-local-linux-developement-environment-on-mac.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Although the Mac OS X operating system is &lt;em&gt;similar&lt;/em&gt; as Linux, there are still several differences between them. So it is necessarily to switch to a pure Linux at any time you want if you are a developer for Linux. The most convenient way is ssh to a Linux …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Although the Mac OS X operating system is &lt;em&gt;similar&lt;/em&gt; as Linux, there are still several differences between them. So it is necessarily to switch to a pure Linux at any time you want if you are a developer for Linux. The most convenient way is ssh to a Linux server when you have a usable internet connection. But internet is not always usable, for example, you are in a aircraft. If one can virtualise a pure Linux environment at background in your local machine and log in though ssh and use a local file system as shared folder, that is very convenient. In this post, I will show you how to virtualise a Linux environment at background locally and set a local folder as a shared folder for the virtual machine. When you ssh to the virtual machine though a local port, you can use this pure Linux environment as your familiar remote Linux server.&lt;/p&gt;
&lt;h2&gt;Install Virtualbox on Mac&lt;/h2&gt;
&lt;p&gt;Virtualbox installation on your Mac is very easy. You just need go to the &lt;a href="http://download.virtualbox.org/virtualbox/5.2.6/"&gt;download page&lt;/a&gt;, download the &lt;a href="http://download.virtualbox.org/virtualbox/5.2.6/VirtualBox-5.2.6-120293-OSX.dmg"&gt;dmg file&lt;/a&gt; (version 5.2.6, now) and install it.&lt;/p&gt;
&lt;h2&gt;Install CentOS 7 in the Virtualbox&lt;/h2&gt;
&lt;p&gt;Linux environment installation is still straightforward. I select CentOS 7 as an example, here. You can chose any Linux distribution as you want, like Ubuntu, OpenSUSE and Arch.&lt;/p&gt;
&lt;p&gt;First, download CentOS 7 distribution iso file at &lt;a href="https://www.centos.org/download/"&gt;official website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then open the Virtualbox application and click &lt;code&gt;New&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/install-centos7-in-the-virtualbox-1.png"&gt;&lt;/p&gt;
&lt;p&gt;and type some basic information:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/install-centos7-in-the-virtualbox-2.png"&gt;&lt;/p&gt;
&lt;p&gt;Then set memory size of your virtual machine:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/install-centos7-in-the-virtualbox-3.png"&gt;&lt;/p&gt;
&lt;p&gt;Then create a virtual hard disk to your virtual machine:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/install-centos7-in-the-virtualbox-4.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/install-centos7-in-the-virtualbox-5.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/install-centos7-in-the-virtualbox-6.png"&gt;
&lt;code&gt;Dynamically allocated&lt;/code&gt; can save hard disk space of your Mac.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/install-centos7-in-the-virtualbox-7.png"&gt;&lt;/p&gt;
&lt;p&gt;Then mount CentOS 7 installation iso file to the optical drive of your virtual machine:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/install-centos7-in-the-virtualbox-8.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/install-centos7-in-the-virtualbox-9.png"&gt;&lt;/p&gt;
&lt;p&gt;Finally, &lt;code&gt;Start&lt;/code&gt; the virtual machine and install the CentOS 7 follow the installation guide.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/install-centos7-in-the-virtualbox-10.png"&gt;&lt;/p&gt;
&lt;h3&gt;Network configurations for the virtual machine&lt;/h3&gt;
&lt;p&gt;After normal installation, the virtual machine can not connect to the Internet, because the network device is not turned on when you boot for default configuration. We need modify the default configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    vi /etc/sysconfig/network-scripts/ifcfg-enp0s3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Modify &lt;code&gt;ONBOOT=no&lt;/code&gt; to &lt;code&gt;ONBOOT=yes&lt;/code&gt; and reboot.&lt;/p&gt;
&lt;h2&gt;Install Virtualbox Guest Additions&lt;/h2&gt;
&lt;h3&gt;Download the matched version iso file&lt;/h3&gt;
&lt;p&gt;First get the version of your Virtualbox, and go to the &lt;a href="http://download.virtualbox.org/virtualbox/5.2.6/"&gt;download page&lt;/a&gt;(for 5.2.6) to download matched version Virtualbox guest additions iso file, &lt;code&gt;VBoxGuestAdditions_[version].iso&lt;/code&gt; (for 5.2.6: &lt;a href="http://download.virtualbox.org/virtualbox/5.2.6/VBoxGuestAdditions_5.2.6.iso"&gt;VBoxGuestAdditions_5.2.6.iso&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Install required packages on CentOS 7 virtual machine&lt;/h3&gt;
&lt;p&gt;Before install Virtualbox guest additions, we need install some development tools which are needed. The following commends need be executed by a root account or a account with &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    yum update
    yum groupinstall &amp;quot;Development Tools&amp;quot;
    yum install kernel-devel
    yum install epel-release
    yum install dkms
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Run installation script to install Virtualbox guest additions&lt;/h3&gt;
&lt;p&gt;First, we mount the iso file on the optical drive of the virtual machine like when we installed CentOS 7 and reboot. Then we create a folder to mount the optical drive:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    mkdir /tmp/VBoxLinuxAdditions
    mount /dev/cdrom /tmp/VBoxLinuxAdditions/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we install Virtualbox guest additions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    cd /tmp/VBoxLinuxAdditions
    sh /tmp/VBoxLinuxAdditions/VBoxLinuxAdditions.run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, we reboot the virtual machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    shutdown -r now
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Set SSH Login through Localhost&lt;/h2&gt;
&lt;h3&gt;In Virtualbox application&lt;/h3&gt;
&lt;p&gt;First, we need shut down the virtual machine. Then we set ssh login port:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/set-ssh-login-through-localhost-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/set-ssh-login-through-localhost-2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/set-ssh-login-through-localhost-3.png"&gt;&lt;/p&gt;
&lt;h3&gt;Start up the virtual machine through command line&lt;/h3&gt;
&lt;p&gt;You can start up and manage your virtual machine through command line. We can list all the virtual machines on the host machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    VBoxManage list vms

    ...
    &lt;span class="s2"&gt;&amp;quot;CentOS7&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;055381a3-fa87-4ed9-a2a7-4a426cd42c44&lt;span class="o"&gt;}&lt;/span&gt;
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And start up the virtual machine by the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   VBoxManage startvm CentOS7 --type headless

   Waiting &lt;span class="k"&gt;for&lt;/span&gt; VM &lt;span class="s2"&gt;&amp;quot;CentOS7&amp;quot;&lt;/span&gt; to power on...
   VM &lt;span class="s2"&gt;&amp;quot;CentOS7&amp;quot;&lt;/span&gt; has been successfully started.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;--type headless&lt;/code&gt; start up the virtual machine in the background. If you want to use GUI, you can change it as &lt;code&gt;--type gui&lt;/code&gt;. Then you can list all the running virtual machines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    VBoxManage list runningvms

    &lt;span class="s2"&gt;&amp;quot;CentOS7&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;055381a3-fa87-4ed9-a2a7-4a426cd42c44&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you can shut down the running virtual machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    VBoxManage controlvm CentOS7 poweroff
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Connect your virtual machine through command line&lt;/h3&gt;
&lt;p&gt;After started up your virtual machine using &lt;code&gt;--type headless&lt;/code&gt;, you can connect to your virtual machine through command line as connecting to a remote Linux server:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/set-ssh-login-through-localhost-4.png"&gt;&lt;/p&gt;
&lt;h2&gt;Set Shared Folder for the Virtual Machine&lt;/h2&gt;
&lt;h3&gt;In the Virtualbox application&lt;/h3&gt;
&lt;p&gt;Now we shut down the virtual machine and set a folder of host machine as the shared folder:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/set-shared-folder-for-the-virtual-machine-1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/set-shared-folder-for-the-virtual-machine-2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://sun-rongyang.github.io/2018/figure/set-shared-folder-for-the-virtual-machine-3.png"&gt;&lt;/p&gt;
&lt;h3&gt;Share the folder to normal user on the virtual machine&lt;/h3&gt;
&lt;p&gt;Now we start up the virtual machine. And we can find the shared folder at &lt;code&gt;/media/sf_[NameOfTheSharedFolder]&lt;/code&gt;. But this folder can only be readded/written by root and users in the &lt;code&gt;vboxsf&lt;/code&gt; group. We need add normal user to the &lt;code&gt;vboxsf&lt;/code&gt; group to use the shared folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    usermod -a -G vboxsf USER
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;USER&lt;/code&gt; is the name of user you want to add to &lt;code&gt;vboxsf&lt;/code&gt; group. Then reboot the virtual machine.&lt;/p&gt;
&lt;h3&gt;Mount the shared folder to a appointed path&lt;/h3&gt;
&lt;p&gt;Now we can use the shared folder, but it is convenient to mount the folder automatically to a appointed path during start up. Add the following code to &lt;code&gt;/etc/rc.local&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    mount -t vboxsf -o uid=USER_UID,gid=USER_GID NameOfTheSharedFolder /a/appointed/path
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;USER_UID&lt;/code&gt; and &lt;code&gt;USER_GID&lt;/code&gt; can be found in &lt;code&gt;/etc/passwd&lt;/code&gt; file. Then add &lt;code&gt;-x&lt;/code&gt; attribute to the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   chmod +x /etc/rc.d/rc.local
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, reboot the virtual machine. You will find the shared folder with read/write have been mounted at &lt;code&gt;/a/appointed/path&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;That's it! A local pure Linux environment with a host machine shared folder has been constructed.&lt;/p&gt;</content><category term="Linux"></category><category term="OSX"></category><category term="Mac"></category><category term="VM"></category></entry></feed>